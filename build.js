// --------------------------------------------------------------------
// Copyright (c) 2024 Alexandre Bento Freire. All rights reserved.
// Licensed under the MIT license
// --------------------------------------------------------------------

import esbuild from 'esbuild';
import fs from 'fs';
import path from 'path';

const BANNER = `// --------------------------------------------------------------------
// Copyright (c) 2024 Alexandre Bento Freire. All rights reserved.
// Licensed under the MIT license
// --------------------------------------------------------------------`;

process.chdir(path.dirname(process.argv[1]));
const readFile = (filename) => fs.readFileSync(filename, 'utf8');
const version = JSON.parse(readFile('package.json'))['version'];

async function build() {
    for (const runMode of ['browser', 'component', 'node']) {
        const isBrowser = runMode === 'browser';
        const isNode = runMode === 'node';
        fs.writeFileSync('externals.ts', readFile(`externals/${isNode ? 'node' : 'browser'}.ts`)
            .replace(/--------\n\n/, "--------\n// DO NOT EDIT THIS FILE\n\n"));

        for (const isProduction of [false, true]) {

            let params = {
                entryPoints: ['./jstracetoix.ts'],
                outfile: runMode + '/jstracetoix' + (isProduction ? '' : '-dev') + (isBrowser ? '.js' : '.mjs'),
                minify: isProduction,
                sourcemap: isProduction,
                platform: isBrowser ? 'browser' : 'node',
                bundle: true,
                banner: { js: BANNER + `\n// Version: ${version}` },
                external: ['worker_threads'],
                format: isBrowser ? 'iife' : 'esm'
            };
            if (isBrowser) {
                params.globalName = 'jstracetoix';
                params.target = 'es2015';
                params.footer = {
                    js: 'for(const key of Object.keys(jstracetoix).filter((key) => ' +
                        'key.includes("__"))) { window[key]=jstracetoix[key]; }'
                };
            };

            try {
                await esbuild.build(params);
            } catch (error) {
                console.error('Build failed:', error);
                process.exit(1);
            }
        }
    }

    for (const file of ['README.md', 'examples/example-browser.html', 'examples/example-react/App.js']) {
        fs.writeFileSync(file, readFile('README.md').replace(/jstracetoix@\d{1,3}\.\d{1,3}\.\d{1,3}\//, `jstracetoix@${version}/`));
    }
    if (readFile('CHANGELOG.md').split("\n")[0].indexOf(version) === -1) {
        throw new Error(`CHANGELOG.md doesn't ${version}`)
    }
    console.log(`Build completed successfully`);
}

build();